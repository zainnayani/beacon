#include <WiFi.h>
#include <HTTPClient.h>

#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

const char* ssid = "Android AP";
const char* password =  "ahsanshah1";

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

int int_image = 1;
BLEService *pService;
BLECharacteristic *pCharacteristic;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password); 
  while (WiFi.status() != WL_CONNECTED) { //Check for the connection
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
  Serial.println("Starting BLE work!");
  BLEDevice::init("Long name works now"); //set date with name of bluetooth...
  BLEServer *pServer = BLEDevice::createServer();
  pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_READ 
                                       );
  
}

void start_service(String json)
{
  int n = json.length(); 
  char json_array[n + 1]; 
  strcpy(json_array, json.c_str()); 
  
  pCharacteristic->setValue(json_array);
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  Serial.println("Characteristic defined! Now you can read it in your phone!");
}

String http_get()
{
  if ((WiFi.status() == WL_CONNECTED)) { //Check the current connection status
    HTTPClient http;
    http.begin("http://jsonplaceholder.typicode.com/users/1"); //Specify the URL
    int httpCode = http.GET();//Make the request
    if (httpCode > 0) { //Check for the returning code
        String response = http.getString();
        Serial.println(httpCode);
        Serial.println(response);
        http.end(); //Free the resources
        return response;
      }
    else {
      Serial.println("Error on HTTP request");
      http.end(); //Free the resources
      return "Error on HTTP request";
    }
  }else{
    Serial.println("Error in WiFi connection");   
    return "Error in WiFi connection";
 }
}

String http_post(String post_data)
{
  if(WiFi.status()== WL_CONNECTED){   //Check WiFi connection status
   HTTPClient http;   
   http.begin("http://jsonplaceholder.typicode.com/posts");  //Specify destination for HTTP request
   http.addHeader("Content-Type", "text/plain");             //Specify content-type header
   int httpResponseCode = http.POST(post_data);   //Send the actual POST request
   if(httpResponseCode>0){
    String response = http.getString();                       //Get the response to the request
    Serial.println(httpResponseCode);   //Print return code
    Serial.println(response);           //Print request answer
    http.end();  //Free resources
    return response;
   }else{
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);
    http.end();  //Free resources
    return "Error on sending POST: " + httpResponseCode;
   }
 }else{
    Serial.println("Error in WiFi connection");   
    return "Error in WiFi connection";
 }
}

void loop() {
  delay(30*1000);
  String response = http_get();
  start_service(response);
}
